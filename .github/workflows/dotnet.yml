# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  MAJOR_VERSION: 1
  MINOR_VERSION: 0

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IAC_DIR: WKTAAE.DPU.FinancialAllocation/iac
      SRC_DIR: WKTAAE.DPU.FinancialAllocation
      # ASF_WORKER_DIR: WKTAAE.DPU.Allocation.ASF.Worker
      # FII_WORKER_DIR: WKTAAE.DPU.Allocation.FII.Worker
      # SI_WORKER_DIR: WKTAAE.DPU.Allocation.SI.Worker
      # ASF_WORKER_PROJ: WKTAAE.DPU.Allocation.ASF.Worker.csproj
      # FII_WORKER_PROJ: WKTAAE.DPU.Allocation.FII.Worker.csproj
      # SI_WORKER_PROJ: WKTAAE.DPU.Allocation.SI.Worker.csproj
      DOTNET_VERSION: "6.0.x"
      CONFIGURATION: "Release"
    steps:
      - name: Print branch name
        run: echo "Branch name ${GITHUB_REF_NAME}"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        working-directory: ${{ env.SRC_DIR }}
        run: dotnet restore

      - name: Build
        working-directory: ${{ env.SRC_DIR }}
        run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore

      - name: Test
        working-directory: ${{ env.SRC_DIR }}
        run: dotnet test --no-restore --no-build --verbosity normal

      # - name: Publish Worker
      #   working-directory: ${{ env.ASF_WORKER_DIR }}
      #   run: dotnet publish ${{ env.ASF_WORKER_PROJ }} --self-contained false --configuration ${{ env.CONFIGURATION }} --output publish/worker

      # - name: Publish Worker
      #   working-directory: ${{ env.FII_WORKER_DIR }}
      #   run: dotnet publish ${{ env.FII_WORKER_PROJ }} --self-contained false --configuration ${{ env.CONFIGURATION }} --output publish/worker

      # - name: Publish Worker
      #   working-directory: ${{ env.SI_WORKER_DIR }}
      #   run: dotnet publish ${{ env.SI_WORKER_PROJ }} --self-contained false --configuration ${{ env.CONFIGURATION }} --output publish/worker

      # - name: Upload Worker artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ASF-worker
      #     path: ${{ env.ASF_WORKER_DIR }}/publish

      # - name: Upload Worker artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: FII-worker
      #     path: ${{ env.FII_WORKER_DIR }}/publish

      # - name: Upload Worker artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: SI-worker
      #     path: ${{ env.SI_WORKER_DIR }}/publish

      - name: Upload IaC artifact
        uses: actions/upload-artifact@v3
        with:
          name: financial-allocation-iac
          path: ${{ env.IAC_DIR }}

  deploy-cdk:
    runs-on: ubuntu-latest
    needs: [build]
    env:
      CDK_DIR: cdk
      LIB_DIR: cdk/lib
    steps:
      - name: Get IaC artifact
        uses: actions/download-artifact@v3
        with:
          name: financial-allocation-iac

      - name: Set environment variables for Test Environment
        if: startsWith( github.ref_name, 'master')
        run: |
          echo "ENV_NAME=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "ENV_TYPE=${{ vars.ENV_TYPE_NONPROD }}" >> $GITHUB_ENV
          # echo "TARGET_ACCOUNT_ID_FOR_CDK=${{ vars.FINANCIALALLOCATION_TEST }}" >> $GITHUB_ENV

      - name: Setup build version
        run: echo "BUILD_VERSION=${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.${{ github.run_number }}"

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Replace Action
        uses: cschleiden/replace-tokens@v1.2
        with:
          tokenPrefix: "#{"
          tokenSuffix: "}"
          files: "${{ env.LIB_DIR }}/params.py"
        env:
          ENV_NAME: "Test15"
          ENV_TYPE: ${{ env.ENV_TYPE }}          
          BUILD_VERSION: ${{ env.BUILD_VERSION }}

      - name: Install boto3 dependency
        working-directory: ${{ env.CDK_DIR }}
        run: pip install boto3

      - name: Install All Dependencies
        working-directory: ${{ env.CDK_DIR }}
        run: pip install -r requirements.txt

      - name: Run python script to deploy infra
        working-directory: ${{ env.CDK_DIR }}
        run: python wrapper.py
        # env:
        #   ENVIRONMENT: ${{ env.ENV_NAME }}
        #   ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #   SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # TARGET_ACCOUNT_ID: ${{ env.TARGET_ACCOUNT_ID_FOR_CDK }}
          # MANAGEMENT_AWS_REGION: ${{ vars.BASECONE_AWS_ACCOUNT_REGION }}
          # TARGET_AWS_REGION: ${{ vars.BASECONE_TARGET_ACCOUNT_REGION }}
          # TARGET_ROLE_NAME: ${{ vars.BASECONE_TARGET_ROLE_NAME }}
